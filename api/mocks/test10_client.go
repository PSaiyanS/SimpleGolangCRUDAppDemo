// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	test10 "test10/api"
)

// Test10Client is an autogenerated mock type for the Test10Client type
type Test10Client struct {
	mock.Mock
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *Test10Client) Ping(ctx context.Context, in *test10.PingRequest, opts ...grpc.CallOption) (*test10.PingRespond, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *test10.PingRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *test10.PingRequest, ...grpc.CallOption) (*test10.PingRespond, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *test10.PingRequest, ...grpc.CallOption) *test10.PingRespond); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test10.PingRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *test10.PingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomCreate provides a mock function with given fields: ctx, in, opts
func (_m *Test10Client) RoomCreate(ctx context.Context, in *test10.RoomCreateRequest, opts ...grpc.CallOption) (*test10.RoomCreateRespond, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RoomCreate")
	}

	var r0 *test10.RoomCreateRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *test10.RoomCreateRequest, ...grpc.CallOption) (*test10.RoomCreateRespond, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *test10.RoomCreateRequest, ...grpc.CallOption) *test10.RoomCreateRespond); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test10.RoomCreateRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *test10.RoomCreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomDelete provides a mock function with given fields: ctx, in, opts
func (_m *Test10Client) RoomDelete(ctx context.Context, in *test10.RoomDeleteRequest, opts ...grpc.CallOption) (*test10.RoomDeleteRespond, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RoomDelete")
	}

	var r0 *test10.RoomDeleteRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *test10.RoomDeleteRequest, ...grpc.CallOption) (*test10.RoomDeleteRespond, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *test10.RoomDeleteRequest, ...grpc.CallOption) *test10.RoomDeleteRespond); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test10.RoomDeleteRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *test10.RoomDeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomGetById provides a mock function with given fields: ctx, in, opts
func (_m *Test10Client) RoomGetById(ctx context.Context, in *test10.RoomGetByIdRequest, opts ...grpc.CallOption) (*test10.RoomGetByIdRespond, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RoomGetById")
	}

	var r0 *test10.RoomGetByIdRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *test10.RoomGetByIdRequest, ...grpc.CallOption) (*test10.RoomGetByIdRespond, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *test10.RoomGetByIdRequest, ...grpc.CallOption) *test10.RoomGetByIdRespond); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test10.RoomGetByIdRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *test10.RoomGetByIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomList provides a mock function with given fields: ctx, in, opts
func (_m *Test10Client) RoomList(ctx context.Context, in *test10.RoomListRequest, opts ...grpc.CallOption) (*test10.RoomListRespond, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RoomList")
	}

	var r0 *test10.RoomListRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *test10.RoomListRequest, ...grpc.CallOption) (*test10.RoomListRespond, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *test10.RoomListRequest, ...grpc.CallOption) *test10.RoomListRespond); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test10.RoomListRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *test10.RoomListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomUpdate provides a mock function with given fields: ctx, in, opts
func (_m *Test10Client) RoomUpdate(ctx context.Context, in *test10.RoomUpdateRequest, opts ...grpc.CallOption) (*test10.RoomUpdateRespond, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RoomUpdate")
	}

	var r0 *test10.RoomUpdateRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *test10.RoomUpdateRequest, ...grpc.CallOption) (*test10.RoomUpdateRespond, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *test10.RoomUpdateRequest, ...grpc.CallOption) *test10.RoomUpdateRespond); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test10.RoomUpdateRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *test10.RoomUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCreate provides a mock function with given fields: ctx, in, opts
func (_m *Test10Client) UserCreate(ctx context.Context, in *test10.UserCreateRequest, opts ...grpc.CallOption) (*test10.UserCreateRespond, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserCreate")
	}

	var r0 *test10.UserCreateRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *test10.UserCreateRequest, ...grpc.CallOption) (*test10.UserCreateRespond, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *test10.UserCreateRequest, ...grpc.CallOption) *test10.UserCreateRespond); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test10.UserCreateRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *test10.UserCreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserDelete provides a mock function with given fields: ctx, in, opts
func (_m *Test10Client) UserDelete(ctx context.Context, in *test10.UserDeleteRequest, opts ...grpc.CallOption) (*test10.UserDeleteRespond, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserDelete")
	}

	var r0 *test10.UserDeleteRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *test10.UserDeleteRequest, ...grpc.CallOption) (*test10.UserDeleteRespond, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *test10.UserDeleteRequest, ...grpc.CallOption) *test10.UserDeleteRespond); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test10.UserDeleteRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *test10.UserDeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGetById provides a mock function with given fields: ctx, in, opts
func (_m *Test10Client) UserGetById(ctx context.Context, in *test10.UserGetByIdRequest, opts ...grpc.CallOption) (*test10.UserGetByIdRespond, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserGetById")
	}

	var r0 *test10.UserGetByIdRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *test10.UserGetByIdRequest, ...grpc.CallOption) (*test10.UserGetByIdRespond, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *test10.UserGetByIdRequest, ...grpc.CallOption) *test10.UserGetByIdRespond); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test10.UserGetByIdRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *test10.UserGetByIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserList provides a mock function with given fields: ctx, in, opts
func (_m *Test10Client) UserList(ctx context.Context, in *test10.UserListRequest, opts ...grpc.CallOption) (*test10.UserListRespond, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserList")
	}

	var r0 *test10.UserListRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *test10.UserListRequest, ...grpc.CallOption) (*test10.UserListRespond, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *test10.UserListRequest, ...grpc.CallOption) *test10.UserListRespond); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test10.UserListRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *test10.UserListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUpdate provides a mock function with given fields: ctx, in, opts
func (_m *Test10Client) UserUpdate(ctx context.Context, in *test10.UserUpdateRequest, opts ...grpc.CallOption) (*test10.UserUpdateRespond, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserUpdate")
	}

	var r0 *test10.UserUpdateRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *test10.UserUpdateRequest, ...grpc.CallOption) (*test10.UserUpdateRespond, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *test10.UserUpdateRequest, ...grpc.CallOption) *test10.UserUpdateRespond); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*test10.UserUpdateRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *test10.UserUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTest10Client creates a new instance of Test10Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTest10Client(t interface {
	mock.TestingT
	Cleanup(func())
}) *Test10Client {
	mock := &Test10Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
