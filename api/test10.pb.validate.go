// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: test10/api/test10.proto

package test10

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}

	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingRespond with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRespond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRespond with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRespondMultiError, or
// nil if none found.
func (m *PingRespond) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRespond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PingRespondMultiError(errors)
	}

	return nil
}

// PingRespondMultiError is an error wrapping multiple validation errors
// returned by PingRespond.ValidateAll() if the designated constraints aren't met.
type PingRespondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRespondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRespondMultiError) AllErrors() []error { return m }

// PingRespondValidationError is the validation error returned by
// PingRespond.Validate if the designated constraints aren't met.
type PingRespondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRespondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRespondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRespondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRespondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRespondValidationError) ErrorName() string { return "PingRespondValidationError" }

// Error satisfies the builtin error interface
func (e PingRespondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRespond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRespondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRespondValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Email

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCreateRequestMultiError, or nil if none found.
func (m *UserCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserCreateRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserCreateRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserCreateRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserCreateRequestMultiError(errors)
	}

	return nil
}

// UserCreateRequestMultiError is an error wrapping multiple validation errors
// returned by UserCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type UserCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateRequestMultiError) AllErrors() []error { return m }

// UserCreateRequestValidationError is the validation error returned by
// UserCreateRequest.Validate if the designated constraints aren't met.
type UserCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateRequestValidationError) ErrorName() string {
	return "UserCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateRequestValidationError{}

// Validate checks the field values on UserCreateRespond with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserCreateRespond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreateRespond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCreateRespondMultiError, or nil if none found.
func (m *UserCreateRespond) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreateRespond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserCreateRespondValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserCreateRespondValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserCreateRespondValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserCreateRespondMultiError(errors)
	}

	return nil
}

// UserCreateRespondMultiError is an error wrapping multiple validation errors
// returned by UserCreateRespond.ValidateAll() if the designated constraints
// aren't met.
type UserCreateRespondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateRespondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateRespondMultiError) AllErrors() []error { return m }

// UserCreateRespondValidationError is the validation error returned by
// UserCreateRespond.Validate if the designated constraints aren't met.
type UserCreateRespondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateRespondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateRespondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateRespondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateRespondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateRespondValidationError) ErrorName() string {
	return "UserCreateRespondValidationError"
}

// Error satisfies the builtin error interface
func (e UserCreateRespondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateRespond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateRespondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateRespondValidationError{}

// Validate checks the field values on UserListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserListRequestMultiError, or nil if none found.
func (m *UserListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return UserListRequestMultiError(errors)
	}

	return nil
}

// UserListRequestMultiError is an error wrapping multiple validation errors
// returned by UserListRequest.ValidateAll() if the designated constraints
// aren't met.
type UserListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListRequestMultiError) AllErrors() []error { return m }

// UserListRequestValidationError is the validation error returned by
// UserListRequest.Validate if the designated constraints aren't met.
type UserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListRequestValidationError) ErrorName() string { return "UserListRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListRequestValidationError{}

// Validate checks the field values on UserListRespond with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserListRespond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListRespond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserListRespondMultiError, or nil if none found.
func (m *UserListRespond) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListRespond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserListRespondValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserListRespondValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserListRespondValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return UserListRespondMultiError(errors)
	}

	return nil
}

// UserListRespondMultiError is an error wrapping multiple validation errors
// returned by UserListRespond.ValidateAll() if the designated constraints
// aren't met.
type UserListRespondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListRespondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListRespondMultiError) AllErrors() []error { return m }

// UserListRespondValidationError is the validation error returned by
// UserListRespond.Validate if the designated constraints aren't met.
type UserListRespondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListRespondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListRespondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListRespondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListRespondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListRespondValidationError) ErrorName() string { return "UserListRespondValidationError" }

// Error satisfies the builtin error interface
func (e UserListRespondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListRespond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListRespondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListRespondValidationError{}

// Validate checks the field values on UserUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateRequestMultiError, or nil if none found.
func (m *UserUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUpdateRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUpdateRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserUpdateRequestMultiError(errors)
	}

	return nil
}

// UserUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UserUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateRequestMultiError) AllErrors() []error { return m }

// UserUpdateRequestValidationError is the validation error returned by
// UserUpdateRequest.Validate if the designated constraints aren't met.
type UserUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateRequestValidationError) ErrorName() string {
	return "UserUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateRequestValidationError{}

// Validate checks the field values on UserUpdateRespond with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserUpdateRespond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateRespond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdateRespondMultiError, or nil if none found.
func (m *UserUpdateRespond) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateRespond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUpdateRespondValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUpdateRespondValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateRespondValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserUpdateRespondMultiError(errors)
	}

	return nil
}

// UserUpdateRespondMultiError is an error wrapping multiple validation errors
// returned by UserUpdateRespond.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateRespondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateRespondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateRespondMultiError) AllErrors() []error { return m }

// UserUpdateRespondValidationError is the validation error returned by
// UserUpdateRespond.Validate if the designated constraints aren't met.
type UserUpdateRespondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateRespondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateRespondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateRespondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateRespondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateRespondValidationError) ErrorName() string {
	return "UserUpdateRespondValidationError"
}

// Error satisfies the builtin error interface
func (e UserUpdateRespondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateRespond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateRespondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateRespondValidationError{}

// Validate checks the field values on UserDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDeleteRequestMultiError, or nil if none found.
func (m *UserDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UserDeleteRequestMultiError(errors)
	}

	return nil
}

// UserDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by UserDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type UserDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDeleteRequestMultiError) AllErrors() []error { return m }

// UserDeleteRequestValidationError is the validation error returned by
// UserDeleteRequest.Validate if the designated constraints aren't met.
type UserDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeleteRequestValidationError) ErrorName() string {
	return "UserDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDeleteRequestValidationError{}

// Validate checks the field values on UserDeleteRespond with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDeleteRespond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDeleteRespond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDeleteRespondMultiError, or nil if none found.
func (m *UserDeleteRespond) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDeleteRespond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return UserDeleteRespondMultiError(errors)
	}

	return nil
}

// UserDeleteRespondMultiError is an error wrapping multiple validation errors
// returned by UserDeleteRespond.ValidateAll() if the designated constraints
// aren't met.
type UserDeleteRespondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDeleteRespondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDeleteRespondMultiError) AllErrors() []error { return m }

// UserDeleteRespondValidationError is the validation error returned by
// UserDeleteRespond.Validate if the designated constraints aren't met.
type UserDeleteRespondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeleteRespondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeleteRespondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeleteRespondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDeleteRespondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeleteRespondValidationError) ErrorName() string {
	return "UserDeleteRespondValidationError"
}

// Error satisfies the builtin error interface
func (e UserDeleteRespondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDeleteRespond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeleteRespondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDeleteRespondValidationError{}

// Validate checks the field values on UserGetByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetByIdRequestMultiError, or nil if none found.
func (m *UserGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UserGetByIdRequestMultiError(errors)
	}

	return nil
}

// UserGetByIdRequestMultiError is an error wrapping multiple validation errors
// returned by UserGetByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type UserGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetByIdRequestMultiError) AllErrors() []error { return m }

// UserGetByIdRequestValidationError is the validation error returned by
// UserGetByIdRequest.Validate if the designated constraints aren't met.
type UserGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetByIdRequestValidationError) ErrorName() string {
	return "UserGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetByIdRequestValidationError{}

// Validate checks the field values on UserGetByIdRespond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGetByIdRespond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetByIdRespond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetByIdRespondMultiError, or nil if none found.
func (m *UserGetByIdRespond) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetByIdRespond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetByIdRespondValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetByIdRespondValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetByIdRespondValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetByIdRespondMultiError(errors)
	}

	return nil
}

// UserGetByIdRespondMultiError is an error wrapping multiple validation errors
// returned by UserGetByIdRespond.ValidateAll() if the designated constraints
// aren't met.
type UserGetByIdRespondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetByIdRespondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetByIdRespondMultiError) AllErrors() []error { return m }

// UserGetByIdRespondValidationError is the validation error returned by
// UserGetByIdRespond.Validate if the designated constraints aren't met.
type UserGetByIdRespondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetByIdRespondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetByIdRespondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetByIdRespondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetByIdRespondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetByIdRespondValidationError) ErrorName() string {
	return "UserGetByIdRespondValidationError"
}

// Error satisfies the builtin error interface
func (e UserGetByIdRespondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetByIdRespond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetByIdRespondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetByIdRespondValidationError{}

// Validate checks the field values on Room with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Room) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Room with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoomMultiError, or nil if none found.
func (m *Room) ValidateAll() error {
	return m.validate(true)
}

func (m *Room) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return RoomMultiError(errors)
	}

	return nil
}

// RoomMultiError is an error wrapping multiple validation errors returned by
// Room.ValidateAll() if the designated constraints aren't met.
type RoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomMultiError) AllErrors() []error { return m }

// RoomValidationError is the validation error returned by Room.Validate if the
// designated constraints aren't met.
type RoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomValidationError) ErrorName() string { return "RoomValidationError" }

// Error satisfies the builtin error interface
func (e RoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomValidationError{}

// Validate checks the field values on RoomCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomCreateRequestMultiError, or nil if none found.
func (m *RoomCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateRequestValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoomCreateRequestMultiError(errors)
	}

	return nil
}

// RoomCreateRequestMultiError is an error wrapping multiple validation errors
// returned by RoomCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type RoomCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomCreateRequestMultiError) AllErrors() []error { return m }

// RoomCreateRequestValidationError is the validation error returned by
// RoomCreateRequest.Validate if the designated constraints aren't met.
type RoomCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomCreateRequestValidationError) ErrorName() string {
	return "RoomCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoomCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomCreateRequestValidationError{}

// Validate checks the field values on RoomCreateRespond with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomCreateRespond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomCreateRespond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomCreateRespondMultiError, or nil if none found.
func (m *RoomCreateRespond) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomCreateRespond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomCreateRespondValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomCreateRespondValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomCreateRespondValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoomCreateRespondMultiError(errors)
	}

	return nil
}

// RoomCreateRespondMultiError is an error wrapping multiple validation errors
// returned by RoomCreateRespond.ValidateAll() if the designated constraints
// aren't met.
type RoomCreateRespondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomCreateRespondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomCreateRespondMultiError) AllErrors() []error { return m }

// RoomCreateRespondValidationError is the validation error returned by
// RoomCreateRespond.Validate if the designated constraints aren't met.
type RoomCreateRespondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomCreateRespondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomCreateRespondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomCreateRespondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomCreateRespondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomCreateRespondValidationError) ErrorName() string {
	return "RoomCreateRespondValidationError"
}

// Error satisfies the builtin error interface
func (e RoomCreateRespondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomCreateRespond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomCreateRespondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomCreateRespondValidationError{}

// Validate checks the field values on RoomListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomListRequestMultiError, or nil if none found.
func (m *RoomListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return RoomListRequestMultiError(errors)
	}

	return nil
}

// RoomListRequestMultiError is an error wrapping multiple validation errors
// returned by RoomListRequest.ValidateAll() if the designated constraints
// aren't met.
type RoomListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomListRequestMultiError) AllErrors() []error { return m }

// RoomListRequestValidationError is the validation error returned by
// RoomListRequest.Validate if the designated constraints aren't met.
type RoomListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomListRequestValidationError) ErrorName() string { return "RoomListRequestValidationError" }

// Error satisfies the builtin error interface
func (e RoomListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomListRequestValidationError{}

// Validate checks the field values on RoomListRespond with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomListRespond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomListRespond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomListRespondMultiError, or nil if none found.
func (m *RoomListRespond) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomListRespond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoomListRespondValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoomListRespondValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoomListRespondValidationError{
					field:  fmt.Sprintf("Rooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return RoomListRespondMultiError(errors)
	}

	return nil
}

// RoomListRespondMultiError is an error wrapping multiple validation errors
// returned by RoomListRespond.ValidateAll() if the designated constraints
// aren't met.
type RoomListRespondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomListRespondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomListRespondMultiError) AllErrors() []error { return m }

// RoomListRespondValidationError is the validation error returned by
// RoomListRespond.Validate if the designated constraints aren't met.
type RoomListRespondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomListRespondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomListRespondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomListRespondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomListRespondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomListRespondValidationError) ErrorName() string { return "RoomListRespondValidationError" }

// Error satisfies the builtin error interface
func (e RoomListRespondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomListRespond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomListRespondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomListRespondValidationError{}

// Validate checks the field values on RoomUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomUpdateRequestMultiError, or nil if none found.
func (m *RoomUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomUpdateRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomUpdateRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomUpdateRequestValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoomUpdateRequestMultiError(errors)
	}

	return nil
}

// RoomUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by RoomUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type RoomUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomUpdateRequestMultiError) AllErrors() []error { return m }

// RoomUpdateRequestValidationError is the validation error returned by
// RoomUpdateRequest.Validate if the designated constraints aren't met.
type RoomUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomUpdateRequestValidationError) ErrorName() string {
	return "RoomUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoomUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomUpdateRequestValidationError{}

// Validate checks the field values on RoomUpdateRespond with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomUpdateRespond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomUpdateRespond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomUpdateRespondMultiError, or nil if none found.
func (m *RoomUpdateRespond) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomUpdateRespond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomUpdateRespondValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomUpdateRespondValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomUpdateRespondValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoomUpdateRespondMultiError(errors)
	}

	return nil
}

// RoomUpdateRespondMultiError is an error wrapping multiple validation errors
// returned by RoomUpdateRespond.ValidateAll() if the designated constraints
// aren't met.
type RoomUpdateRespondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomUpdateRespondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomUpdateRespondMultiError) AllErrors() []error { return m }

// RoomUpdateRespondValidationError is the validation error returned by
// RoomUpdateRespond.Validate if the designated constraints aren't met.
type RoomUpdateRespondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomUpdateRespondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomUpdateRespondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomUpdateRespondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomUpdateRespondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomUpdateRespondValidationError) ErrorName() string {
	return "RoomUpdateRespondValidationError"
}

// Error satisfies the builtin error interface
func (e RoomUpdateRespondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomUpdateRespond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomUpdateRespondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomUpdateRespondValidationError{}

// Validate checks the field values on RoomDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomDeleteRequestMultiError, or nil if none found.
func (m *RoomDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RoomDeleteRequestMultiError(errors)
	}

	return nil
}

// RoomDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by RoomDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type RoomDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomDeleteRequestMultiError) AllErrors() []error { return m }

// RoomDeleteRequestValidationError is the validation error returned by
// RoomDeleteRequest.Validate if the designated constraints aren't met.
type RoomDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomDeleteRequestValidationError) ErrorName() string {
	return "RoomDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoomDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomDeleteRequestValidationError{}

// Validate checks the field values on RoomDeleteRespond with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomDeleteRespond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomDeleteRespond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomDeleteRespondMultiError, or nil if none found.
func (m *RoomDeleteRespond) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomDeleteRespond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return RoomDeleteRespondMultiError(errors)
	}

	return nil
}

// RoomDeleteRespondMultiError is an error wrapping multiple validation errors
// returned by RoomDeleteRespond.ValidateAll() if the designated constraints
// aren't met.
type RoomDeleteRespondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomDeleteRespondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomDeleteRespondMultiError) AllErrors() []error { return m }

// RoomDeleteRespondValidationError is the validation error returned by
// RoomDeleteRespond.Validate if the designated constraints aren't met.
type RoomDeleteRespondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomDeleteRespondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomDeleteRespondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomDeleteRespondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomDeleteRespondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomDeleteRespondValidationError) ErrorName() string {
	return "RoomDeleteRespondValidationError"
}

// Error satisfies the builtin error interface
func (e RoomDeleteRespondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomDeleteRespond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomDeleteRespondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomDeleteRespondValidationError{}

// Validate checks the field values on RoomGetByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomGetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomGetByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomGetByIdRequestMultiError, or nil if none found.
func (m *RoomGetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomGetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RoomGetByIdRequestMultiError(errors)
	}

	return nil
}

// RoomGetByIdRequestMultiError is an error wrapping multiple validation errors
// returned by RoomGetByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type RoomGetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomGetByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomGetByIdRequestMultiError) AllErrors() []error { return m }

// RoomGetByIdRequestValidationError is the validation error returned by
// RoomGetByIdRequest.Validate if the designated constraints aren't met.
type RoomGetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomGetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomGetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomGetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomGetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomGetByIdRequestValidationError) ErrorName() string {
	return "RoomGetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoomGetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomGetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomGetByIdRequestValidationError{}

// Validate checks the field values on RoomGetByIdRespond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomGetByIdRespond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomGetByIdRespond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomGetByIdRespondMultiError, or nil if none found.
func (m *RoomGetByIdRespond) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomGetByIdRespond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomGetByIdRespondValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomGetByIdRespondValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomGetByIdRespondValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoomGetByIdRespondMultiError(errors)
	}

	return nil
}

// RoomGetByIdRespondMultiError is an error wrapping multiple validation errors
// returned by RoomGetByIdRespond.ValidateAll() if the designated constraints
// aren't met.
type RoomGetByIdRespondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomGetByIdRespondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomGetByIdRespondMultiError) AllErrors() []error { return m }

// RoomGetByIdRespondValidationError is the validation error returned by
// RoomGetByIdRespond.Validate if the designated constraints aren't met.
type RoomGetByIdRespondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomGetByIdRespondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomGetByIdRespondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomGetByIdRespondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomGetByIdRespondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomGetByIdRespondValidationError) ErrorName() string {
	return "RoomGetByIdRespondValidationError"
}

// Error satisfies the builtin error interface
func (e RoomGetByIdRespondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomGetByIdRespond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomGetByIdRespondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomGetByIdRespondValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Content

	// no validation rules for UserId

	// no validation rules for RoomId

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}
