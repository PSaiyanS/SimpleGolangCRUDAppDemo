// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: test10/api/test10.proto

package test10

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Test10Client is the client API for Test10 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Test10Client interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingRespond, error)
	// User
	UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateRespond, error)
	UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListRespond, error)
	UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateRespond, error)
	UserDelete(ctx context.Context, in *UserDeleteRequest, opts ...grpc.CallOption) (*UserDeleteRespond, error)
	UserGetById(ctx context.Context, in *UserGetByIdRequest, opts ...grpc.CallOption) (*UserGetByIdRespond, error)
	// Room
	RoomCreate(ctx context.Context, in *RoomCreateRequest, opts ...grpc.CallOption) (*RoomCreateRespond, error)
	RoomList(ctx context.Context, in *RoomListRequest, opts ...grpc.CallOption) (*RoomListRespond, error)
	RoomUpdate(ctx context.Context, in *RoomUpdateRequest, opts ...grpc.CallOption) (*RoomUpdateRespond, error)
	RoomDelete(ctx context.Context, in *RoomDeleteRequest, opts ...grpc.CallOption) (*RoomDeleteRespond, error)
	RoomGetById(ctx context.Context, in *RoomGetByIdRequest, opts ...grpc.CallOption) (*RoomGetByIdRespond, error)
}

type test10Client struct {
	cc grpc.ClientConnInterface
}

func NewTest10Client(cc grpc.ClientConnInterface) Test10Client {
	return &test10Client{cc}
}

func (c *test10Client) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingRespond, error) {
	out := new(PingRespond)
	err := c.cc.Invoke(ctx, "/test10.Test10/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *test10Client) UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateRespond, error) {
	out := new(UserCreateRespond)
	err := c.cc.Invoke(ctx, "/test10.Test10/UserCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *test10Client) UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListRespond, error) {
	out := new(UserListRespond)
	err := c.cc.Invoke(ctx, "/test10.Test10/UserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *test10Client) UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateRespond, error) {
	out := new(UserUpdateRespond)
	err := c.cc.Invoke(ctx, "/test10.Test10/UserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *test10Client) UserDelete(ctx context.Context, in *UserDeleteRequest, opts ...grpc.CallOption) (*UserDeleteRespond, error) {
	out := new(UserDeleteRespond)
	err := c.cc.Invoke(ctx, "/test10.Test10/UserDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *test10Client) UserGetById(ctx context.Context, in *UserGetByIdRequest, opts ...grpc.CallOption) (*UserGetByIdRespond, error) {
	out := new(UserGetByIdRespond)
	err := c.cc.Invoke(ctx, "/test10.Test10/UserGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *test10Client) RoomCreate(ctx context.Context, in *RoomCreateRequest, opts ...grpc.CallOption) (*RoomCreateRespond, error) {
	out := new(RoomCreateRespond)
	err := c.cc.Invoke(ctx, "/test10.Test10/RoomCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *test10Client) RoomList(ctx context.Context, in *RoomListRequest, opts ...grpc.CallOption) (*RoomListRespond, error) {
	out := new(RoomListRespond)
	err := c.cc.Invoke(ctx, "/test10.Test10/RoomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *test10Client) RoomUpdate(ctx context.Context, in *RoomUpdateRequest, opts ...grpc.CallOption) (*RoomUpdateRespond, error) {
	out := new(RoomUpdateRespond)
	err := c.cc.Invoke(ctx, "/test10.Test10/RoomUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *test10Client) RoomDelete(ctx context.Context, in *RoomDeleteRequest, opts ...grpc.CallOption) (*RoomDeleteRespond, error) {
	out := new(RoomDeleteRespond)
	err := c.cc.Invoke(ctx, "/test10.Test10/RoomDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *test10Client) RoomGetById(ctx context.Context, in *RoomGetByIdRequest, opts ...grpc.CallOption) (*RoomGetByIdRespond, error) {
	out := new(RoomGetByIdRespond)
	err := c.cc.Invoke(ctx, "/test10.Test10/RoomGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Test10Server is the server API for Test10 service.
// All implementations must embed UnimplementedTest10Server
// for forward compatibility
type Test10Server interface {
	Ping(context.Context, *PingRequest) (*PingRespond, error)
	// User
	UserCreate(context.Context, *UserCreateRequest) (*UserCreateRespond, error)
	UserList(context.Context, *UserListRequest) (*UserListRespond, error)
	UserUpdate(context.Context, *UserUpdateRequest) (*UserUpdateRespond, error)
	UserDelete(context.Context, *UserDeleteRequest) (*UserDeleteRespond, error)
	UserGetById(context.Context, *UserGetByIdRequest) (*UserGetByIdRespond, error)
	// Room
	RoomCreate(context.Context, *RoomCreateRequest) (*RoomCreateRespond, error)
	RoomList(context.Context, *RoomListRequest) (*RoomListRespond, error)
	RoomUpdate(context.Context, *RoomUpdateRequest) (*RoomUpdateRespond, error)
	RoomDelete(context.Context, *RoomDeleteRequest) (*RoomDeleteRespond, error)
	RoomGetById(context.Context, *RoomGetByIdRequest) (*RoomGetByIdRespond, error)
	mustEmbedUnimplementedTest10Server()
}

// UnimplementedTest10Server must be embedded to have forward compatible implementations.
type UnimplementedTest10Server struct {
}

func (UnimplementedTest10Server) Ping(context.Context, *PingRequest) (*PingRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTest10Server) UserCreate(context.Context, *UserCreateRequest) (*UserCreateRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedTest10Server) UserList(context.Context, *UserListRequest) (*UserListRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedTest10Server) UserUpdate(context.Context, *UserUpdateRequest) (*UserUpdateRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedTest10Server) UserDelete(context.Context, *UserDeleteRequest) (*UserDeleteRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDelete not implemented")
}
func (UnimplementedTest10Server) UserGetById(context.Context, *UserGetByIdRequest) (*UserGetByIdRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetById not implemented")
}
func (UnimplementedTest10Server) RoomCreate(context.Context, *RoomCreateRequest) (*RoomCreateRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCreate not implemented")
}
func (UnimplementedTest10Server) RoomList(context.Context, *RoomListRequest) (*RoomListRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomList not implemented")
}
func (UnimplementedTest10Server) RoomUpdate(context.Context, *RoomUpdateRequest) (*RoomUpdateRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomUpdate not implemented")
}
func (UnimplementedTest10Server) RoomDelete(context.Context, *RoomDeleteRequest) (*RoomDeleteRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomDelete not implemented")
}
func (UnimplementedTest10Server) RoomGetById(context.Context, *RoomGetByIdRequest) (*RoomGetByIdRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomGetById not implemented")
}
func (UnimplementedTest10Server) mustEmbedUnimplementedTest10Server() {}

// UnsafeTest10Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Test10Server will
// result in compilation errors.
type UnsafeTest10Server interface {
	mustEmbedUnimplementedTest10Server()
}

func RegisterTest10Server(s grpc.ServiceRegistrar, srv Test10Server) {
	s.RegisterService(&Test10_ServiceDesc, srv)
}

func _Test10_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test10Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test10.Test10/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test10Server).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test10_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test10Server).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test10.Test10/UserCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test10Server).UserCreate(ctx, req.(*UserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test10_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test10Server).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test10.Test10/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test10Server).UserList(ctx, req.(*UserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test10_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test10Server).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test10.Test10/UserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test10Server).UserUpdate(ctx, req.(*UserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test10_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test10Server).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test10.Test10/UserDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test10Server).UserDelete(ctx, req.(*UserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test10_UserGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test10Server).UserGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test10.Test10/UserGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test10Server).UserGetById(ctx, req.(*UserGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test10_RoomCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test10Server).RoomCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test10.Test10/RoomCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test10Server).RoomCreate(ctx, req.(*RoomCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test10_RoomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test10Server).RoomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test10.Test10/RoomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test10Server).RoomList(ctx, req.(*RoomListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test10_RoomUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test10Server).RoomUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test10.Test10/RoomUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test10Server).RoomUpdate(ctx, req.(*RoomUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test10_RoomDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test10Server).RoomDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test10.Test10/RoomDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test10Server).RoomDelete(ctx, req.(*RoomDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test10_RoomGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomGetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test10Server).RoomGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test10.Test10/RoomGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test10Server).RoomGetById(ctx, req.(*RoomGetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Test10_ServiceDesc is the grpc.ServiceDesc for Test10 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test10_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test10.Test10",
	HandlerType: (*Test10Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Test10_Ping_Handler,
		},
		{
			MethodName: "UserCreate",
			Handler:    _Test10_UserCreate_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _Test10_UserList_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _Test10_UserUpdate_Handler,
		},
		{
			MethodName: "UserDelete",
			Handler:    _Test10_UserDelete_Handler,
		},
		{
			MethodName: "UserGetById",
			Handler:    _Test10_UserGetById_Handler,
		},
		{
			MethodName: "RoomCreate",
			Handler:    _Test10_RoomCreate_Handler,
		},
		{
			MethodName: "RoomList",
			Handler:    _Test10_RoomList_Handler,
		},
		{
			MethodName: "RoomUpdate",
			Handler:    _Test10_RoomUpdate_Handler,
		},
		{
			MethodName: "RoomDelete",
			Handler:    _Test10_RoomDelete_Handler,
		},
		{
			MethodName: "RoomGetById",
			Handler:    _Test10_RoomGetById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test10/api/test10.proto",
}
