// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/carbon.proto

package carbon

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Logger with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Logger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Logger with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LoggerMultiError, or nil if none found.
func (m *Logger) ValidateAll() error {
	return m.validate(true)
}

func (m *Logger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Level

	// no validation rules for Pretty

	if len(errors) > 0 {
		return LoggerMultiError(errors)
	}

	return nil
}

// LoggerMultiError is an error wrapping multiple validation errors returned by
// Logger.ValidateAll() if the designated constraints aren't met.
type LoggerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoggerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoggerMultiError) AllErrors() []error { return m }

// LoggerValidationError is the validation error returned by Logger.Validate if
// the designated constraints aren't met.
type LoggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoggerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoggerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoggerValidationError) ErrorName() string { return "LoggerValidationError" }

// Error satisfies the builtin error interface
func (e LoggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoggerValidationError{}

// Validate checks the field values on TCPSocket with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TCPSocket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TCPSocket with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TCPSocketMultiError, or nil
// if none found.
func (m *TCPSocket) ValidateAll() error {
	return m.validate(true)
}

func (m *TCPSocket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetAddress()) < 1 {
		err := TCPSocketValidationError{
			field:  "Address",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPort() > 65535 {
		err := TCPSocketValidationError{
			field:  "Port",
			reason: "value must be less than or equal to 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Secure

	if len(errors) > 0 {
		return TCPSocketMultiError(errors)
	}

	return nil
}

// TCPSocketMultiError is an error wrapping multiple validation errors returned
// by TCPSocket.ValidateAll() if the designated constraints aren't met.
type TCPSocketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TCPSocketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TCPSocketMultiError) AllErrors() []error { return m }

// TCPSocketValidationError is the validation error returned by
// TCPSocket.Validate if the designated constraints aren't met.
type TCPSocketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TCPSocketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TCPSocketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TCPSocketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TCPSocketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TCPSocketValidationError) ErrorName() string { return "TCPSocketValidationError" }

// Error satisfies the builtin error interface
func (e TCPSocketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTCPSocket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TCPSocketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TCPSocketValidationError{}

// Validate checks the field values on UnixSocket with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnixSocket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnixSocket with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnixSocketMultiError, or
// nil if none found.
func (m *UnixSocket) ValidateAll() error {
	return m.validate(true)
}

func (m *UnixSocket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetPath()) < 1 {
		err := UnixSocketValidationError{
			field:  "Path",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UnixSocketMultiError(errors)
	}

	return nil
}

// UnixSocketMultiError is an error wrapping multiple validation errors
// returned by UnixSocket.ValidateAll() if the designated constraints aren't met.
type UnixSocketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnixSocketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnixSocketMultiError) AllErrors() []error { return m }

// UnixSocketValidationError is the validation error returned by
// UnixSocket.Validate if the designated constraints aren't met.
type UnixSocketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnixSocketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnixSocketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnixSocketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnixSocketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnixSocketValidationError) ErrorName() string { return "UnixSocketValidationError" }

// Error satisfies the builtin error interface
func (e UnixSocketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnixSocket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnixSocketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnixSocketValidationError{}

// Validate checks the field values on Listener with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Listener) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Listener with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListenerMultiError, or nil
// if none found.
func (m *Listener) ValidateAll() error {
	return m.validate(true)
}

func (m *Listener) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofSocketPresent := false
	switch v := m.Socket.(type) {
	case *Listener_Tcp:
		if v == nil {
			err := ListenerValidationError{
				field:  "Socket",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSocketPresent = true

		if all {
			switch v := interface{}(m.GetTcp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListenerValidationError{
						field:  "Tcp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListenerValidationError{
						field:  "Tcp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTcp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListenerValidationError{
					field:  "Tcp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Listener_Unix:
		if v == nil {
			err := ListenerValidationError{
				field:  "Socket",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofSocketPresent = true

		if all {
			switch v := interface{}(m.GetUnix()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListenerValidationError{
						field:  "Unix",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListenerValidationError{
						field:  "Unix",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnix()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListenerValidationError{
					field:  "Unix",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofSocketPresent {
		err := ListenerValidationError{
			field:  "Socket",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListenerMultiError(errors)
	}

	return nil
}

// ListenerMultiError is an error wrapping multiple validation errors returned
// by Listener.ValidateAll() if the designated constraints aren't met.
type ListenerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListenerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListenerMultiError) AllErrors() []error { return m }

// ListenerValidationError is the validation error returned by
// Listener.Validate if the designated constraints aren't met.
type ListenerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListenerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListenerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListenerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListenerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListenerValidationError) ErrorName() string { return "ListenerValidationError" }

// Error satisfies the builtin error interface
func (e ListenerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListener.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListenerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListenerValidationError{}

// Validate checks the field values on Database with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Database) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Database with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DatabaseMultiError, or nil
// if none found.
func (m *Database) ValidateAll() error {
	return m.validate(true)
}

func (m *Database) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetHost()) < 1 {
		err := DatabaseValidationError{
			field:  "Host",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPort() > 65535 {
		err := DatabaseValidationError{
			field:  "Port",
			reason: "value must be less than or equal to 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetName()) < 1 {
		err := DatabaseValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TracingEnabled

	// no validation rules for Debug

	// no validation rules for MaxIdleConns

	// no validation rules for MaxOpenConns

	// no validation rules for ConnMaxLifeTime

	// no validation rules for ConnMaxIdleTime

	// no validation rules for AuthMethod

	if len(m.GetUsername()) < 1 {
		err := DatabaseValidationError{
			field:  "Username",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for AwsRegion

	if len(errors) > 0 {
		return DatabaseMultiError(errors)
	}

	return nil
}

// DatabaseMultiError is an error wrapping multiple validation errors returned
// by Database.ValidateAll() if the designated constraints aren't met.
type DatabaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DatabaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DatabaseMultiError) AllErrors() []error { return m }

// DatabaseValidationError is the validation error returned by
// Database.Validate if the designated constraints aren't met.
type DatabaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatabaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatabaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatabaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatabaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatabaseValidationError) ErrorName() string { return "DatabaseValidationError" }

// Error satisfies the builtin error interface
func (e DatabaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatabase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatabaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatabaseValidationError{}

// Validate checks the field values on JwtSigning with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JwtSigning) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JwtSigning with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JwtSigningMultiError, or
// nil if none found.
func (m *JwtSigning) ValidateAll() error {
	return m.validate(true)
}

func (m *JwtSigning) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetPrivateKey()) < 1 {
		err := JwtSigningValidationError{
			field:  "PrivateKey",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	// no validation rules for ExpiresTime

	if utf8.RuneCountInString(m.GetIssuer()) < 1 {
		err := JwtSigningValidationError{
			field:  "Issuer",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DefaultAudience

	if len(errors) > 0 {
		return JwtSigningMultiError(errors)
	}

	return nil
}

// JwtSigningMultiError is an error wrapping multiple validation errors
// returned by JwtSigning.ValidateAll() if the designated constraints aren't met.
type JwtSigningMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JwtSigningMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JwtSigningMultiError) AllErrors() []error { return m }

// JwtSigningValidationError is the validation error returned by
// JwtSigning.Validate if the designated constraints aren't met.
type JwtSigningValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JwtSigningValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JwtSigningValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JwtSigningValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JwtSigningValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JwtSigningValidationError) ErrorName() string { return "JwtSigningValidationError" }

// Error satisfies the builtin error interface
func (e JwtSigningValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJwtSigning.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JwtSigningValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JwtSigningValidationError{}

// Validate checks the field values on S3 with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *S3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in S3MultiError, or nil if none found.
func (m *S3) ValidateAll() error {
	return m.validate(true)
}

func (m *S3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessKeyId

	// no validation rules for SecretAccessKey

	// no validation rules for Region

	if len(m.GetBucket()) < 1 {
		err := S3ValidationError{
			field:  "Bucket",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Host

	// no validation rules for AccountId

	// no validation rules for Provider

	if len(errors) > 0 {
		return S3MultiError(errors)
	}

	return nil
}

// S3MultiError is an error wrapping multiple validation errors returned by
// S3.ValidateAll() if the designated constraints aren't met.
type S3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3MultiError) AllErrors() []error { return m }

// S3ValidationError is the validation error returned by S3.Validate if the
// designated constraints aren't met.
type S3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3ValidationError) ErrorName() string { return "S3ValidationError" }

// Error satisfies the builtin error interface
func (e S3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3ValidationError{}

// Validate checks the field values on NATS with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *NATS) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NATS with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NATSMultiError, or nil if none found.
func (m *NATS) ValidateAll() error {
	return m.validate(true)
}

func (m *NATS) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Url

	if len(errors) > 0 {
		return NATSMultiError(errors)
	}

	return nil
}

// NATSMultiError is an error wrapping multiple validation errors returned by
// NATS.ValidateAll() if the designated constraints aren't met.
type NATSMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NATSMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NATSMultiError) AllErrors() []error { return m }

// NATSValidationError is the validation error returned by NATS.Validate if the
// designated constraints aren't met.
type NATSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NATSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NATSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NATSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NATSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NATSValidationError) ErrorName() string { return "NATSValidationError" }

// Error satisfies the builtin error interface
func (e NATSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNATS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NATSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NATSValidationError{}

// Validate checks the field values on Profiling with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Profiling) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Profiling with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfilingMultiError, or nil
// if none found.
func (m *Profiling) ValidateAll() error {
	return m.validate(true)
}

func (m *Profiling) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	if m.GetPort() > 65535 {
		err := ProfilingValidationError{
			field:  "Port",
			reason: "value must be less than or equal to 65535",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProfilingMultiError(errors)
	}

	return nil
}

// ProfilingMultiError is an error wrapping multiple validation errors returned
// by Profiling.ValidateAll() if the designated constraints aren't met.
type ProfilingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfilingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfilingMultiError) AllErrors() []error { return m }

// ProfilingValidationError is the validation error returned by
// Profiling.Validate if the designated constraints aren't met.
type ProfilingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfilingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfilingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfilingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfilingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfilingValidationError) ErrorName() string { return "ProfilingValidationError" }

// Error satisfies the builtin error interface
func (e ProfilingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfiling.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfilingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfilingValidationError{}

// Validate checks the field values on TLS with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *TLS) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TLS with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TLSMultiError, or nil if none found.
func (m *TLS) ValidateAll() error {
	return m.validate(true)
}

func (m *TLS) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Cert

	// no validation rules for Key

	// no validation rules for Ca

	// no validation rules for InsecureSkipVerify

	if len(errors) > 0 {
		return TLSMultiError(errors)
	}

	return nil
}

// TLSMultiError is an error wrapping multiple validation errors returned by
// TLS.ValidateAll() if the designated constraints aren't met.
type TLSMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TLSMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TLSMultiError) AllErrors() []error { return m }

// TLSValidationError is the validation error returned by TLS.Validate if the
// designated constraints aren't met.
type TLSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TLSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TLSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TLSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TLSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TLSValidationError) ErrorName() string { return "TLSValidationError" }

// Error satisfies the builtin error interface
func (e TLSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTLS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TLSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TLSValidationError{}

// Validate checks the field values on Redis with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Redis) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Redis with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RedisMultiError, or nil if none found.
func (m *Redis) ValidateAll() error {
	return m.validate(true)
}

func (m *Redis) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetAddress()) < 1 {
		err := RedisValidationError{
			field:  "Address",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Db

	// no validation rules for MaxRetries

	// no validation rules for MinRetryBackoff

	// no validation rules for MaxRetryBackoff

	// no validation rules for DialTimeout

	// no validation rules for ReadTimeout

	// no validation rules for WriteTimeout

	// no validation rules for PoolFifo

	// no validation rules for PoolSize

	// no validation rules for MinIdleConns

	// no validation rules for MaxConnAge

	// no validation rules for PoolTimeout

	// no validation rules for IdleTimeout

	// no validation rules for IdleCheckFrequency

	// no validation rules for ReadOnly

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RedisValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RedisValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedisValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Namespace

	// no validation rules for Debug

	if len(errors) > 0 {
		return RedisMultiError(errors)
	}

	return nil
}

// RedisMultiError is an error wrapping multiple validation errors returned by
// Redis.ValidateAll() if the designated constraints aren't met.
type RedisMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedisMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedisMultiError) AllErrors() []error { return m }

// RedisValidationError is the validation error returned by Redis.Validate if
// the designated constraints aren't met.
type RedisValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedisValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedisValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedisValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedisValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedisValidationError) ErrorName() string { return "RedisValidationError" }

// Error satisfies the builtin error interface
func (e RedisValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedis.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedisValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedisValidationError{}

// Validate checks the field values on Kafka with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Kafka) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Kafka with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in KafkaMultiError, or nil if none found.
func (m *Kafka) ValidateAll() error {
	return m.validate(true)
}

func (m *Kafka) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetBrokers()) < 1 {
		err := KafkaValidationError{
			field:  "Brokers",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KafkaValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KafkaValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KafkaValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSasl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KafkaValidationError{
					field:  "Sasl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KafkaValidationError{
					field:  "Sasl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSasl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KafkaValidationError{
				field:  "Sasl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return KafkaMultiError(errors)
	}

	return nil
}

// KafkaMultiError is an error wrapping multiple validation errors returned by
// Kafka.ValidateAll() if the designated constraints aren't met.
type KafkaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KafkaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KafkaMultiError) AllErrors() []error { return m }

// KafkaValidationError is the validation error returned by Kafka.Validate if
// the designated constraints aren't met.
type KafkaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KafkaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KafkaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KafkaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KafkaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KafkaValidationError) ErrorName() string { return "KafkaValidationError" }

// Error satisfies the builtin error interface
func (e KafkaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKafka.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KafkaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KafkaValidationError{}

// Validate checks the field values on SASL with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *SASL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SASL with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SASLMultiError, or nil if none found.
func (m *SASL) ValidateAll() error {
	return m.validate(true)
}

func (m *SASL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mechanism

	if all {
		switch v := interface{}(m.GetIam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SASLValidationError{
					field:  "Iam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SASLValidationError{
					field:  "Iam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SASLValidationError{
				field:  "Iam",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScram()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SASLValidationError{
					field:  "Scram",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SASLValidationError{
					field:  "Scram",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScram()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SASLValidationError{
				field:  "Scram",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SASLValidationError{
					field:  "Plain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SASLValidationError{
					field:  "Plain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SASLValidationError{
				field:  "Plain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SASLMultiError(errors)
	}

	return nil
}

// SASLMultiError is an error wrapping multiple validation errors returned by
// SASL.ValidateAll() if the designated constraints aren't met.
type SASLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SASLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SASLMultiError) AllErrors() []error { return m }

// SASLValidationError is the validation error returned by SASL.Validate if the
// designated constraints aren't met.
type SASLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SASLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SASLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SASLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SASLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SASLValidationError) ErrorName() string { return "SASLValidationError" }

// Error satisfies the builtin error interface
func (e SASLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSASL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SASLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SASLValidationError{}

// Validate checks the field values on SASL_Iam with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SASL_Iam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SASL_Iam with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SASL_IamMultiError, or nil
// if none found.
func (m *SASL_Iam) ValidateAll() error {
	return m.validate(true)
}

func (m *SASL_Iam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessKeyId

	// no validation rules for SecretAccessKey

	// no validation rules for SessionToken

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := SASL_IamValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SASL_IamMultiError(errors)
	}

	return nil
}

// SASL_IamMultiError is an error wrapping multiple validation errors returned
// by SASL_Iam.ValidateAll() if the designated constraints aren't met.
type SASL_IamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SASL_IamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SASL_IamMultiError) AllErrors() []error { return m }

// SASL_IamValidationError is the validation error returned by
// SASL_Iam.Validate if the designated constraints aren't met.
type SASL_IamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SASL_IamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SASL_IamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SASL_IamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SASL_IamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SASL_IamValidationError) ErrorName() string { return "SASL_IamValidationError" }

// Error satisfies the builtin error interface
func (e SASL_IamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSASL_Iam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SASL_IamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SASL_IamValidationError{}

// Validate checks the field values on SASL_Scram with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SASL_Scram) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SASL_Scram with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SASL_ScramMultiError, or
// nil if none found.
func (m *SASL_Scram) ValidateAll() error {
	return m.validate(true)
}

func (m *SASL_Scram) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _SASL_Scram_Algorithm_InLookup[m.GetAlgorithm()]; !ok {
		err := SASL_ScramValidationError{
			field:  "Algorithm",
			reason: "value must be in list [SCRAM-SHA-256 SCRAM-SHA-512]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := SASL_ScramValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := SASL_ScramValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SASL_ScramMultiError(errors)
	}

	return nil
}

// SASL_ScramMultiError is an error wrapping multiple validation errors
// returned by SASL_Scram.ValidateAll() if the designated constraints aren't met.
type SASL_ScramMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SASL_ScramMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SASL_ScramMultiError) AllErrors() []error { return m }

// SASL_ScramValidationError is the validation error returned by
// SASL_Scram.Validate if the designated constraints aren't met.
type SASL_ScramValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SASL_ScramValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SASL_ScramValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SASL_ScramValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SASL_ScramValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SASL_ScramValidationError) ErrorName() string { return "SASL_ScramValidationError" }

// Error satisfies the builtin error interface
func (e SASL_ScramValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSASL_Scram.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SASL_ScramValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SASL_ScramValidationError{}

var _SASL_Scram_Algorithm_InLookup = map[string]struct{}{
	"SCRAM-SHA-256": {},
	"SCRAM-SHA-512": {},
}

// Validate checks the field values on SASL_Plain with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SASL_Plain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SASL_Plain with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SASL_PlainMultiError, or
// nil if none found.
func (m *SASL_Plain) ValidateAll() error {
	return m.validate(true)
}

func (m *SASL_Plain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := SASL_PlainValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := SASL_PlainValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SASL_PlainMultiError(errors)
	}

	return nil
}

// SASL_PlainMultiError is an error wrapping multiple validation errors
// returned by SASL_Plain.ValidateAll() if the designated constraints aren't met.
type SASL_PlainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SASL_PlainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SASL_PlainMultiError) AllErrors() []error { return m }

// SASL_PlainValidationError is the validation error returned by
// SASL_Plain.Validate if the designated constraints aren't met.
type SASL_PlainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SASL_PlainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SASL_PlainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SASL_PlainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SASL_PlainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SASL_PlainValidationError) ErrorName() string { return "SASL_PlainValidationError" }

// Error satisfies the builtin error interface
func (e SASL_PlainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSASL_Plain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SASL_PlainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SASL_PlainValidationError{}
