// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: api/carbon.proto

package carbon

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Logger_Level int32

const (
	Logger_UNSPECIFIED Logger_Level = 0
	Logger_DEBUG       Logger_Level = 1
	Logger_INFO        Logger_Level = 2
	Logger_WARN        Logger_Level = 3
	Logger_ERROR       Logger_Level = 4
	Logger_PANIC       Logger_Level = 5
	Logger_FATAL       Logger_Level = 6
)

// Enum value maps for Logger_Level.
var (
	Logger_Level_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "DEBUG",
		2: "INFO",
		3: "WARN",
		4: "ERROR",
		5: "PANIC",
		6: "FATAL",
	}
	Logger_Level_value = map[string]int32{
		"UNSPECIFIED": 0,
		"DEBUG":       1,
		"INFO":        2,
		"WARN":        3,
		"ERROR":       4,
		"PANIC":       5,
		"FATAL":       6,
	}
)

func (x Logger_Level) Enum() *Logger_Level {
	p := new(Logger_Level)
	*p = x
	return p
}

func (x Logger_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Logger_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_api_carbon_proto_enumTypes[0].Descriptor()
}

func (Logger_Level) Type() protoreflect.EnumType {
	return &file_api_carbon_proto_enumTypes[0]
}

func (x Logger_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Logger_Level.Descriptor instead.
func (Logger_Level) EnumDescriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{0, 0}
}

type Database_AuthMethod int32

const (
	Database_AUTH_METHOD_UNSPECIFIED       Database_AuthMethod = 0
	Database_AUTH_METHOD_NONE              Database_AuthMethod = 1
	Database_AUTH_METHOD_USERNAME_PASSWORD Database_AuthMethod = 2
	Database_AUTH_METHOD_AWS_IAM           Database_AuthMethod = 4
)

// Enum value maps for Database_AuthMethod.
var (
	Database_AuthMethod_name = map[int32]string{
		0: "AUTH_METHOD_UNSPECIFIED",
		1: "AUTH_METHOD_NONE",
		2: "AUTH_METHOD_USERNAME_PASSWORD",
		4: "AUTH_METHOD_AWS_IAM",
	}
	Database_AuthMethod_value = map[string]int32{
		"AUTH_METHOD_UNSPECIFIED":       0,
		"AUTH_METHOD_NONE":              1,
		"AUTH_METHOD_USERNAME_PASSWORD": 2,
		"AUTH_METHOD_AWS_IAM":           4,
	}
)

func (x Database_AuthMethod) Enum() *Database_AuthMethod {
	p := new(Database_AuthMethod)
	*p = x
	return p
}

func (x Database_AuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Database_AuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_api_carbon_proto_enumTypes[1].Descriptor()
}

func (Database_AuthMethod) Type() protoreflect.EnumType {
	return &file_api_carbon_proto_enumTypes[1]
}

func (x Database_AuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Database_AuthMethod.Descriptor instead.
func (Database_AuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{4, 0}
}

type S3_Provider int32

const (
	S3_PROVIDER_UNSPECIFIED S3_Provider = 0
	S3_AWS                  S3_Provider = 1
	S3_CLOUDFLARE           S3_Provider = 2
)

// Enum value maps for S3_Provider.
var (
	S3_Provider_name = map[int32]string{
		0: "PROVIDER_UNSPECIFIED",
		1: "AWS",
		2: "CLOUDFLARE",
	}
	S3_Provider_value = map[string]int32{
		"PROVIDER_UNSPECIFIED": 0,
		"AWS":                  1,
		"CLOUDFLARE":           2,
	}
)

func (x S3_Provider) Enum() *S3_Provider {
	p := new(S3_Provider)
	*p = x
	return p
}

func (x S3_Provider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (S3_Provider) Descriptor() protoreflect.EnumDescriptor {
	return file_api_carbon_proto_enumTypes[2].Descriptor()
}

func (S3_Provider) Type() protoreflect.EnumType {
	return &file_api_carbon_proto_enumTypes[2]
}

func (x S3_Provider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use S3_Provider.Descriptor instead.
func (S3_Provider) EnumDescriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{6, 0}
}

type SASL_Mechanism int32

const (
	SASL_UNAUTHENTICATED SASL_Mechanism = 0
	SASL_AWS_IAM         SASL_Mechanism = 1
	SASL_SCRAM           SASL_Mechanism = 2
	SASL_PLAIN           SASL_Mechanism = 3
)

// Enum value maps for SASL_Mechanism.
var (
	SASL_Mechanism_name = map[int32]string{
		0: "UNAUTHENTICATED",
		1: "AWS_IAM",
		2: "SCRAM",
		3: "PLAIN",
	}
	SASL_Mechanism_value = map[string]int32{
		"UNAUTHENTICATED": 0,
		"AWS_IAM":         1,
		"SCRAM":           2,
		"PLAIN":           3,
	}
)

func (x SASL_Mechanism) Enum() *SASL_Mechanism {
	p := new(SASL_Mechanism)
	*p = x
	return p
}

func (x SASL_Mechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SASL_Mechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_api_carbon_proto_enumTypes[3].Descriptor()
}

func (SASL_Mechanism) Type() protoreflect.EnumType {
	return &file_api_carbon_proto_enumTypes[3]
}

func (x SASL_Mechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SASL_Mechanism.Descriptor instead.
func (SASL_Mechanism) EnumDescriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{12, 0}
}

type Logger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level  Logger_Level `protobuf:"varint,1,opt,name=level,proto3,enum=greyhole.carbon.Logger_Level" json:"level,omitempty"`
	Pretty bool         `protobuf:"varint,2,opt,name=pretty,proto3" json:"pretty,omitempty"`
}

func (x *Logger) Reset() {
	*x = Logger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logger) ProtoMessage() {}

func (x *Logger) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logger.ProtoReflect.Descriptor instead.
func (*Logger) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{0}
}

func (x *Logger) GetLevel() Logger_Level {
	if x != nil {
		return x.Level
	}
	return Logger_UNSPECIFIED
}

func (x *Logger) GetPretty() bool {
	if x != nil {
		return x.Pretty
	}
	return false
}

type TCPSocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Port    uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Secure  bool   `protobuf:"varint,3,opt,name=secure,proto3" json:"secure,omitempty"`
}

func (x *TCPSocket) Reset() {
	*x = TCPSocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPSocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPSocket) ProtoMessage() {}

func (x *TCPSocket) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPSocket.ProtoReflect.Descriptor instead.
func (*TCPSocket) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{1}
}

func (x *TCPSocket) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TCPSocket) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TCPSocket) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

type UnixSocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *UnixSocket) Reset() {
	*x = UnixSocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnixSocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnixSocket) ProtoMessage() {}

func (x *UnixSocket) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnixSocket.ProtoReflect.Descriptor instead.
func (*UnixSocket) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{2}
}

func (x *UnixSocket) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Socket:
	//
	//	*Listener_Tcp
	//	*Listener_Unix
	Socket isListener_Socket `protobuf_oneof:"socket"`
}

func (x *Listener) Reset() {
	*x = Listener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listener) ProtoMessage() {}

func (x *Listener) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listener.ProtoReflect.Descriptor instead.
func (*Listener) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{3}
}

func (m *Listener) GetSocket() isListener_Socket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (x *Listener) GetTcp() *TCPSocket {
	if x, ok := x.GetSocket().(*Listener_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *Listener) GetUnix() *UnixSocket {
	if x, ok := x.GetSocket().(*Listener_Unix); ok {
		return x.Unix
	}
	return nil
}

type isListener_Socket interface {
	isListener_Socket()
}

type Listener_Tcp struct {
	Tcp *TCPSocket `protobuf:"bytes,1,opt,name=tcp,proto3,oneof"`
}

type Listener_Unix struct {
	Unix *UnixSocket `protobuf:"bytes,2,opt,name=unix,proto3,oneof"`
}

func (*Listener_Tcp) isListener_Socket() {}

func (*Listener_Unix) isListener_Socket() {}

type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host            string              `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port            uint32              `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Name            string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` // database name
	TracingEnabled  bool                `protobuf:"varint,4,opt,name=tracing_enabled,json=tracingEnabled,proto3" json:"tracing_enabled,omitempty"`
	Debug           bool                `protobuf:"varint,5,opt,name=debug,proto3" json:"debug,omitempty"`
	MaxIdleConns    uint32              `protobuf:"varint,6,opt,name=max_idle_conns,json=maxIdleConns,proto3" json:"max_idle_conns,omitempty"`
	MaxOpenConns    uint32              `protobuf:"varint,7,opt,name=max_open_conns,json=maxOpenConns,proto3" json:"max_open_conns,omitempty"`
	ConnMaxLifeTime uint32              `protobuf:"varint,8,opt,name=conn_max_life_time,json=connMaxLifeTime,proto3" json:"conn_max_life_time,omitempty"` // minutes
	ConnMaxIdleTime uint32              `protobuf:"varint,9,opt,name=conn_max_idle_time,json=connMaxIdleTime,proto3" json:"conn_max_idle_time,omitempty"` // minutes
	AuthMethod      Database_AuthMethod `protobuf:"varint,10,opt,name=auth_method,json=authMethod,proto3,enum=greyhole.carbon.Database_AuthMethod" json:"auth_method,omitempty"`
	// AUTH_METHOD_USERNAME_PASSWORD
	Username string `protobuf:"bytes,11,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,12,opt,name=password,proto3" json:"password,omitempty"`
	// AUTH_METHOD_AWS_IAM
	AwsRegion string `protobuf:"bytes,13,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{4}
}

func (x *Database) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Database) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Database) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Database) GetTracingEnabled() bool {
	if x != nil {
		return x.TracingEnabled
	}
	return false
}

func (x *Database) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Database) GetMaxIdleConns() uint32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *Database) GetMaxOpenConns() uint32 {
	if x != nil {
		return x.MaxOpenConns
	}
	return 0
}

func (x *Database) GetConnMaxLifeTime() uint32 {
	if x != nil {
		return x.ConnMaxLifeTime
	}
	return 0
}

func (x *Database) GetConnMaxIdleTime() uint32 {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return 0
}

func (x *Database) GetAuthMethod() Database_AuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return Database_AUTH_METHOD_UNSPECIFIED
}

func (x *Database) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Database) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Database) GetAwsRegion() string {
	if x != nil {
		return x.AwsRegion
	}
	return ""
}

type JwtSigning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey      string `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Password        string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	ExpiresTime     int64  `protobuf:"varint,3,opt,name=expires_time,json=expiresTime,proto3" json:"expires_time,omitempty"` // in seconds
	Issuer          string `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	DefaultAudience string `protobuf:"bytes,5,opt,name=default_audience,json=defaultAudience,proto3" json:"default_audience,omitempty"`
}

func (x *JwtSigning) Reset() {
	*x = JwtSigning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtSigning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtSigning) ProtoMessage() {}

func (x *JwtSigning) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtSigning.ProtoReflect.Descriptor instead.
func (*JwtSigning) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{5}
}

func (x *JwtSigning) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *JwtSigning) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *JwtSigning) GetExpiresTime() int64 {
	if x != nil {
		return x.ExpiresTime
	}
	return 0
}

func (x *JwtSigning) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *JwtSigning) GetDefaultAudience() string {
	if x != nil {
		return x.DefaultAudience
	}
	return ""
}

type S3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId     string      `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`             // require for cloudflare, optional for aws
	SecretAccessKey string      `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"` // require for cloudflare, optional for aws
	Region          string      `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`                                            // require for aws
	Bucket          string      `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Host            string      `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`                                           // optional
	AccountId       string      `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                // require for cloudflare
	Provider        S3_Provider `protobuf:"varint,7,opt,name=provider,proto3,enum=greyhole.carbon.S3_Provider" json:"provider,omitempty"` // default aws
}

func (x *S3) Reset() {
	*x = S3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3) ProtoMessage() {}

func (x *S3) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3.ProtoReflect.Descriptor instead.
func (*S3) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{6}
}

func (x *S3) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *S3) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *S3) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *S3) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *S3) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *S3) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *S3) GetProvider() S3_Provider {
	if x != nil {
		return x.Provider
	}
	return S3_PROVIDER_UNSPECIFIED
}

type NATS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is an optional name label which will be sent to the server
	// on CONNECT to identify the client.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The url can contain username/password semantics. e.g. nats://derek:pass@localhost:4222
	// Comma separated arrays are also supported, e.g. urlA, urlB.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *NATS) Reset() {
	*x = NATS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NATS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NATS) ProtoMessage() {}

func (x *NATS) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NATS.ProtoReflect.Descriptor instead.
func (*NATS) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{7}
}

func (x *NATS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NATS) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Profiling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Port   uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Profiling) Reset() {
	*x = Profiling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profiling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profiling) ProtoMessage() {}

func (x *Profiling) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profiling.ProtoReflect.Descriptor instead.
func (*Profiling) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{8}
}

func (x *Profiling) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Profiling) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type TLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled            bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Cert               string `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Key                string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Ca                 string `protobuf:"bytes,4,opt,name=ca,proto3" json:"ca,omitempty"`
	InsecureSkipVerify bool   `protobuf:"varint,5,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
}

func (x *TLS) Reset() {
	*x = TLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLS) ProtoMessage() {}

func (x *TLS) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLS.ProtoReflect.Descriptor instead.
func (*TLS) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{9}
}

func (x *TLS) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TLS) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *TLS) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TLS) GetCa() string {
	if x != nil {
		return x.Ca
	}
	return ""
}

func (x *TLS) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

type Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// host:port address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Use the specified Username to authenticate the current connection
	// with one of the connections defined in the ACL list when connecting
	// to a Redis 6.0 instance, or greater, that is using the Redis ACL system.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Optional password. Must match the password specified in the
	// requirepass server configuration option (if connecting to a Redis 5.0 instance, or lower),
	// or the User Password when connecting to a Redis 6.0 instance, or greater,
	// that is using the Redis ACL system.
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Database to be selected after connecting to the server.
	Db int32 `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty"`
	// Maximum number of retries before giving up.
	// Default is 3 retries; -1 (not 0) disables retries.
	MaxRetries int32 `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// Minimum backoff between each retry.
	// Default is 8 milliseconds; -1 disables backoff.
	MinRetryBackoff int64 `protobuf:"varint,6,opt,name=min_retry_backoff,json=minRetryBackoff,proto3" json:"min_retry_backoff,omitempty"` // milliseconds
	// Maximum backoff between each retry.
	// Default is 512 milliseconds; -1 disables backoff.
	MaxRetryBackoff int64 `protobuf:"varint,7,opt,name=max_retry_backoff,json=maxRetryBackoff,proto3" json:"max_retry_backoff,omitempty"` // milliseconds
	// Dial timeout for establishing new connections.
	// Default is 5 seconds.
	DialTimeout int64 `protobuf:"varint,8,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"` // milliseconds
	// Timeout for socket reads. If reached, commands will fail
	// with a timeout instead of blocking. Use value -1 for no timeout and 0 for default.
	// Default is 3 seconds.
	ReadTimeout int64 `protobuf:"varint,9,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"` // milliseconds
	// Timeout for socket writes. If reached, commands will fail
	// with a timeout instead of blocking.
	// Default is ReadTimeout.
	WriteTimeout int64 `protobuf:"varint,10,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"` // milliseconds
	// Type of connection pool.
	// true for FIFO pool, false for LIFO pool.
	// Note that fifo has higher overhead compared to lifo.
	PoolFifo bool `protobuf:"varint,11,opt,name=pool_fifo,json=poolFifo,proto3" json:"pool_fifo,omitempty"`
	// Maximum number of socket connections.
	// Default is 10 connections per every available CPU as reported by runtime.GOMAXPROCS.
	PoolSize int32 `protobuf:"varint,12,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty"`
	// Minimum number of idle connections which is useful when establishing
	// new connection is slow.
	MinIdleConns int32 `protobuf:"varint,13,opt,name=min_idle_conns,json=minIdleConns,proto3" json:"min_idle_conns,omitempty"`
	// Connection age at which client retires (closes) the connection.
	// Default is to not close aged connections.
	MaxConnAge int64 `protobuf:"varint,14,opt,name=max_conn_age,json=maxConnAge,proto3" json:"max_conn_age,omitempty"` // milliseconds
	// Amount of time client waits for connection if all connections
	// are busy before returning an error.
	// Default is ReadTimeout + 1 second.
	PoolTimeout int64 `protobuf:"varint,15,opt,name=pool_timeout,json=poolTimeout,proto3" json:"pool_timeout,omitempty"` // milliseconds
	// Amount of time after which client closes idle connections.
	// Should be less than server's timeout.
	// Default is 5 minutes. -1 disables idle timeout check.
	IdleTimeout int64 `protobuf:"varint,16,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"` // milliseconds
	// Frequency of idle checks made by idle connections reaper.
	// Default is 1 minute. -1 disables idle connections reaper,
	// but idle connections are still discarded by the client
	// if IdleTimeout is set.
	IdleCheckFrequency int64 `protobuf:"varint,17,opt,name=idle_check_frequency,json=idleCheckFrequency,proto3" json:"idle_check_frequency,omitempty"` // milliseconds
	// Enables read only queries on slave nodes.
	ReadOnly bool `protobuf:"varint,18,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	// TLS Config to use. When set TLS will be negotiated.
	Tls       *TLS   `protobuf:"bytes,19,opt,name=tls,proto3" json:"tls,omitempty"`
	Namespace string `protobuf:"bytes,20,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Debug     bool   `protobuf:"varint,21,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *Redis) Reset() {
	*x = Redis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis) ProtoMessage() {}

func (x *Redis) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis.ProtoReflect.Descriptor instead.
func (*Redis) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{10}
}

func (x *Redis) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Redis) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Redis) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Redis) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *Redis) GetMinRetryBackoff() int64 {
	if x != nil {
		return x.MinRetryBackoff
	}
	return 0
}

func (x *Redis) GetMaxRetryBackoff() int64 {
	if x != nil {
		return x.MaxRetryBackoff
	}
	return 0
}

func (x *Redis) GetDialTimeout() int64 {
	if x != nil {
		return x.DialTimeout
	}
	return 0
}

func (x *Redis) GetReadTimeout() int64 {
	if x != nil {
		return x.ReadTimeout
	}
	return 0
}

func (x *Redis) GetWriteTimeout() int64 {
	if x != nil {
		return x.WriteTimeout
	}
	return 0
}

func (x *Redis) GetPoolFifo() bool {
	if x != nil {
		return x.PoolFifo
	}
	return false
}

func (x *Redis) GetPoolSize() int32 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *Redis) GetMinIdleConns() int32 {
	if x != nil {
		return x.MinIdleConns
	}
	return 0
}

func (x *Redis) GetMaxConnAge() int64 {
	if x != nil {
		return x.MaxConnAge
	}
	return 0
}

func (x *Redis) GetPoolTimeout() int64 {
	if x != nil {
		return x.PoolTimeout
	}
	return 0
}

func (x *Redis) GetIdleTimeout() int64 {
	if x != nil {
		return x.IdleTimeout
	}
	return 0
}

func (x *Redis) GetIdleCheckFrequency() int64 {
	if x != nil {
		return x.IdleCheckFrequency
	}
	return 0
}

func (x *Redis) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *Redis) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Redis) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Redis) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

type Kafka struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brokers string `protobuf:"bytes,1,opt,name=brokers,proto3" json:"brokers,omitempty"` // multiple values separated by commas
	Tls     *TLS   `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
	Sasl    *SASL  `protobuf:"bytes,3,opt,name=sasl,proto3" json:"sasl,omitempty"`
}

func (x *Kafka) Reset() {
	*x = Kafka{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kafka) ProtoMessage() {}

func (x *Kafka) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kafka.ProtoReflect.Descriptor instead.
func (*Kafka) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{11}
}

func (x *Kafka) GetBrokers() string {
	if x != nil {
		return x.Brokers
	}
	return ""
}

func (x *Kafka) GetTls() *TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Kafka) GetSasl() *SASL {
	if x != nil {
		return x.Sasl
	}
	return nil
}

type SASL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use enum here for easy to set value from environment variable
	// Since oneof could not be done like that
	Mechanism SASL_Mechanism `protobuf:"varint,1,opt,name=mechanism,proto3,enum=greyhole.carbon.SASL_Mechanism" json:"mechanism,omitempty"`
	Iam       *SASL_Iam      `protobuf:"bytes,2,opt,name=iam,proto3" json:"iam,omitempty"`
	Scram     *SASL_Scram    `protobuf:"bytes,3,opt,name=scram,proto3" json:"scram,omitempty"`
	Plain     *SASL_Plain    `protobuf:"bytes,4,opt,name=plain,proto3" json:"plain,omitempty"`
}

func (x *SASL) Reset() {
	*x = SASL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SASL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SASL) ProtoMessage() {}

func (x *SASL) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SASL.ProtoReflect.Descriptor instead.
func (*SASL) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{12}
}

func (x *SASL) GetMechanism() SASL_Mechanism {
	if x != nil {
		return x.Mechanism
	}
	return SASL_UNAUTHENTICATED
}

func (x *SASL) GetIam() *SASL_Iam {
	if x != nil {
		return x.Iam
	}
	return nil
}

func (x *SASL) GetScram() *SASL_Scram {
	if x != nil {
		return x.Scram
	}
	return nil
}

func (x *SASL) GetPlain() *SASL_Plain {
	if x != nil {
		return x.Plain
	}
	return nil
}

type SASL_Iam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId     string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`             // optional
	SecretAccessKey string `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"` // optional
	SessionToken    string `protobuf:"bytes,3,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`            // optional
	Region          string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *SASL_Iam) Reset() {
	*x = SASL_Iam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SASL_Iam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SASL_Iam) ProtoMessage() {}

func (x *SASL_Iam) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SASL_Iam.ProtoReflect.Descriptor instead.
func (*SASL_Iam) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{12, 0}
}

func (x *SASL_Iam) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *SASL_Iam) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *SASL_Iam) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *SASL_Iam) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type SASL_Scram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SCRAM-SHA-256
	// SCRAM-SHA-512
	Algorithm string `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Username  string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password  string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SASL_Scram) Reset() {
	*x = SASL_Scram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SASL_Scram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SASL_Scram) ProtoMessage() {}

func (x *SASL_Scram) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SASL_Scram.ProtoReflect.Descriptor instead.
func (*SASL_Scram) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{12, 1}
}

func (x *SASL_Scram) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *SASL_Scram) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SASL_Scram) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SASL_Plain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SASL_Plain) Reset() {
	*x = SASL_Plain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_carbon_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SASL_Plain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SASL_Plain) ProtoMessage() {}

func (x *SASL_Plain) ProtoReflect() protoreflect.Message {
	mi := &file_api_carbon_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SASL_Plain.ProtoReflect.Descriptor instead.
func (*SASL_Plain) Descriptor() ([]byte, []int) {
	return file_api_carbon_proto_rawDescGZIP(), []int{12, 2}
}

func (x *SASL_Plain) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SASL_Plain) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_api_carbon_proto protoreflect.FileDescriptor

var file_api_carbon_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x67, 0x72, 0x65, 0x79, 0x68, 0x6f, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72,
	0x62, 0x6f, 0x6e, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x01, 0x0a,
	0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x65, 0x79, 0x68, 0x6f, 0x6c,
	0x65, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x74, 0x74, 0x79, 0x22, 0x58, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x4e, 0x49,
	0x43, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x22, 0x65,
	0x0a, 0x09, 0x54, 0x43, 0x50, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x2a, 0x04, 0x18, 0xff, 0xff, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x22, 0x29, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x7c, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x03,
	0x74, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x65, 0x79,
	0x68, 0x6f, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x2e, 0x54, 0x43, 0x50, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x31, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x65,
	0x79, 0x68, 0x6f, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69,
	0x78, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x78, 0x42,
	0x0d, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xec,
	0x04, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x20, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0xff, 0xff,
	0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12,
	0x2b, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61,
	0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x67, 0x72, 0x65, 0x79, 0x68, 0x6f, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x22, 0x7b, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x49, 0x41, 0x4d, 0x10, 0x04, 0x22, 0xc1, 0x01,
	0x0a, 0x0a, 0x4a, 0x77, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0xb9, 0x02, 0x0a, 0x02, 0x53, 0x33, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x65, 0x79, 0x68, 0x6f, 0x6c,
	0x65, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x2e, 0x53, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x3d,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x57, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x46, 0x4c, 0x41, 0x52, 0x45, 0x10, 0x02, 0x22, 0x2c, 0x0a,
	0x04, 0x4e, 0x41, 0x54, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x42, 0x0a, 0x09, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0xff, 0xff, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x87, 0x01, 0x0a, 0x03, 0x54, 0x4c, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53,
	0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0xc9, 0x05, 0x0a, 0x05, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x64, 0x62, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x6f, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x2a, 0x0a, 0x11, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64,
	0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x69, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x61,
	0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x6e, 0x41, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69,
	0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64,
	0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x64, 0x6c, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x6c, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x72, 0x65, 0x79, 0x68, 0x6f, 0x6c,
	0x65, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x53, 0x52, 0x03, 0x74, 0x6c,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x7d, 0x0a, 0x05, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x21,
	0x0a, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x72, 0x65, 0x79, 0x68, 0x6f, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e,
	0x2e, 0x54, 0x4c, 0x53, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x61, 0x73,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x72, 0x65, 0x79, 0x68, 0x6f,
	0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x2e, 0x53, 0x41, 0x53, 0x4c, 0x52, 0x04,
	0x73, 0x61, 0x73, 0x6c, 0x22, 0xa5, 0x05, 0x0a, 0x04, 0x53, 0x41, 0x53, 0x4c, 0x12, 0x3d, 0x0a,
	0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x67, 0x72, 0x65, 0x79, 0x68, 0x6f, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x62,
	0x6f, 0x6e, 0x2e, 0x53, 0x41, 0x53, 0x4c, 0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x52, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x2b, 0x0a, 0x03,
	0x69, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x65, 0x79,
	0x68, 0x6f, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x2e, 0x53, 0x41, 0x53, 0x4c,
	0x2e, 0x49, 0x61, 0x6d, 0x52, 0x03, 0x69, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x63, 0x72,
	0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x65, 0x79, 0x68,
	0x6f, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x2e, 0x53, 0x41, 0x53, 0x4c, 0x2e,
	0x53, 0x63, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x05,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72,
	0x65, 0x79, 0x68, 0x6f, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x2e, 0x53, 0x41,
	0x53, 0x4c, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x1a,
	0x9b, 0x01, 0x0a, 0x03, 0x49, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x1a, 0x94, 0x01,
	0x0a, 0x05, 0x53, 0x63, 0x72, 0x61, 0x6d, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x72,
	0x1e, 0x52, 0x0d, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x2d, 0x53, 0x48, 0x41, 0x2d, 0x32, 0x35, 0x36,
	0x52, 0x0d, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x2d, 0x53, 0x48, 0x41, 0x2d, 0x35, 0x31, 0x32, 0x52,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x1a, 0x51, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x43, 0x0a, 0x09, 0x4d, 0x65, 0x63, 0x68, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x57, 0x53,
	0x5f, 0x49, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x42, 0x31, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x75, 0x67, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x61,
	0x72, 0x62, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_carbon_proto_rawDescOnce sync.Once
	file_api_carbon_proto_rawDescData = file_api_carbon_proto_rawDesc
)

func file_api_carbon_proto_rawDescGZIP() []byte {
	file_api_carbon_proto_rawDescOnce.Do(func() {
		file_api_carbon_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_carbon_proto_rawDescData)
	})
	return file_api_carbon_proto_rawDescData
}

var file_api_carbon_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_carbon_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_api_carbon_proto_goTypes = []interface{}{
	(Logger_Level)(0),        // 0: greyhole.carbon.Logger.Level
	(Database_AuthMethod)(0), // 1: greyhole.carbon.Database.AuthMethod
	(S3_Provider)(0),         // 2: greyhole.carbon.S3.Provider
	(SASL_Mechanism)(0),      // 3: greyhole.carbon.SASL.Mechanism
	(*Logger)(nil),           // 4: greyhole.carbon.Logger
	(*TCPSocket)(nil),        // 5: greyhole.carbon.TCPSocket
	(*UnixSocket)(nil),       // 6: greyhole.carbon.UnixSocket
	(*Listener)(nil),         // 7: greyhole.carbon.Listener
	(*Database)(nil),         // 8: greyhole.carbon.Database
	(*JwtSigning)(nil),       // 9: greyhole.carbon.JwtSigning
	(*S3)(nil),               // 10: greyhole.carbon.S3
	(*NATS)(nil),             // 11: greyhole.carbon.NATS
	(*Profiling)(nil),        // 12: greyhole.carbon.Profiling
	(*TLS)(nil),              // 13: greyhole.carbon.TLS
	(*Redis)(nil),            // 14: greyhole.carbon.Redis
	(*Kafka)(nil),            // 15: greyhole.carbon.Kafka
	(*SASL)(nil),             // 16: greyhole.carbon.SASL
	(*SASL_Iam)(nil),         // 17: greyhole.carbon.SASL.Iam
	(*SASL_Scram)(nil),       // 18: greyhole.carbon.SASL.Scram
	(*SASL_Plain)(nil),       // 19: greyhole.carbon.SASL.Plain
}
var file_api_carbon_proto_depIdxs = []int32{
	0,  // 0: greyhole.carbon.Logger.level:type_name -> greyhole.carbon.Logger.Level
	5,  // 1: greyhole.carbon.Listener.tcp:type_name -> greyhole.carbon.TCPSocket
	6,  // 2: greyhole.carbon.Listener.unix:type_name -> greyhole.carbon.UnixSocket
	1,  // 3: greyhole.carbon.Database.auth_method:type_name -> greyhole.carbon.Database.AuthMethod
	2,  // 4: greyhole.carbon.S3.provider:type_name -> greyhole.carbon.S3.Provider
	13, // 5: greyhole.carbon.Redis.tls:type_name -> greyhole.carbon.TLS
	13, // 6: greyhole.carbon.Kafka.tls:type_name -> greyhole.carbon.TLS
	16, // 7: greyhole.carbon.Kafka.sasl:type_name -> greyhole.carbon.SASL
	3,  // 8: greyhole.carbon.SASL.mechanism:type_name -> greyhole.carbon.SASL.Mechanism
	17, // 9: greyhole.carbon.SASL.iam:type_name -> greyhole.carbon.SASL.Iam
	18, // 10: greyhole.carbon.SASL.scram:type_name -> greyhole.carbon.SASL.Scram
	19, // 11: greyhole.carbon.SASL.plain:type_name -> greyhole.carbon.SASL.Plain
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_api_carbon_proto_init() }
func file_api_carbon_proto_init() {
	if File_api_carbon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_carbon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPSocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnixSocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtSigning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NATS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profiling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Redis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kafka); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SASL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SASL_Iam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SASL_Scram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_carbon_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SASL_Plain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_carbon_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Listener_Tcp)(nil),
		(*Listener_Unix)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_carbon_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_carbon_proto_goTypes,
		DependencyIndexes: file_api_carbon_proto_depIdxs,
		EnumInfos:         file_api_carbon_proto_enumTypes,
		MessageInfos:      file_api_carbon_proto_msgTypes,
	}.Build()
	File_api_carbon_proto = out.File
	file_api_carbon_proto_rawDesc = nil
	file_api_carbon_proto_goTypes = nil
	file_api_carbon_proto_depIdxs = nil
}
